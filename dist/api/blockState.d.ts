import { Block } from "./block";
import { BlockModel } from "./blockModel";
import { Identifier } from "./identifier";
import { LangKey } from "./lang";
import { Texture } from "./texture";
import { Mod } from "./mod";
import { TriggerSheet } from "./triggerSheet";
export interface SerializedBlockState {
    modelName: string;
    blockEventsId?: string;
    isOpaque?: boolean;
    lightAttenuation?: number;
    canRaycastForBreak?: boolean;
    canRaycastForPlaceOn?: boolean;
    canRaycastForReplace?: boolean;
    walkThrough?: boolean;
    tags?: string[];
    stateGenerators?: string[];
    hardness?: number;
    dropId?: string;
    catalogHidden?: boolean;
    intProperties?: {
        fuelTicks?: number;
    };
    lightLevelRed?: number;
    lightLevelGreen?: number;
    lightLevelBlue?: number;
    swapGroupId?: string;
    friction?: number;
    langKey?: string;
    bounciness?: number;
    canPlace?: boolean;
    rotXZ?: number;
    dropParamOverrides?: Record<string, string>;
    allowSwapping?: boolean;
    isFluid?: boolean;
    itemIcon?: string;
}
export declare class BlockState {
    private mod;
    private block;
    params: Map<string, string>;
    model: BlockModel;
    triggerSheet: TriggerSheet;
    isOpaque: boolean;
    lightAttenuation: number | null;
    canRaycastForBreak: boolean | null;
    canRaycastForPlaceOn: boolean | null;
    canRaycastForReplace: boolean | null;
    walkThrough: boolean | null;
    tags: string[];
    stateGenerators: string[];
    hardness: number | null;
    dropState: BlockState | null;
    catalogHidden: boolean | null;
    fuelTicks: number | null;
    light: [number, number, number] | null;
    swapGroupId: Identifier | null;
    friction: number | null;
    langKey: LangKey | null;
    bounciness: number | null;
    canPlace: null;
    rotXZ: number | null;
    dropParamOverrides: Record<string, string>;
    allowSwapping: boolean | null;
    isFluid: boolean | null;
    itemIcon: Texture | null;
    constructor(mod: Mod, block: Block);
    createBlockModel(id?: string): BlockModel;
    setBlockModel(model: BlockModel): void;
    createTriggerSheet(id?: string): TriggerSheet;
    setTriggerSheet(triggerSheet: TriggerSheet): void;
    compileParams(): string;
    serialize(): SerializedBlockState;
    getFullId(): string;
}
